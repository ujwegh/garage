spring:
  application:
    name: Garage
  datasource:
    url: jdbc:postgresql://localhost:5432/garage
    username: postgres
    password: postgres
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: none
#  boot:
#    admin:
#      client:
#        #login to admin-server:
#        url: http://localhost:8080
#        username: admin
#        password: admin123
#        #login to client:
#        instance:
#          metadata:
#            user:
#              name: admin
#              password: admin123
  #��������� ������������ - ���� ���
#  security:
#    user:
#      name: admin
#      password: admin123

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 564603883747-jcenartmeh82a2vkbga46gnh4fhir2ns.apps.googleusercontent.com
            client-secret: JOCos0cl_IayylbRRmRGUYmz
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"


logging.level.org.springframework.security: debug

management:
  endpoints:
    web:
      exposure:
        include: '*'

graphql:
  servlet:
    mapping: /graphql
    enabled: true
    corsEnabled: true

logging:
  file:
    name: garage.log

app:
  auth:
    tokenSecret: 926D96C90030DD58429D2751AC1BDBBC
    tokenExpirationMsec: 864000000
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
