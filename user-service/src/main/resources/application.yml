spring:
  application:
    name: user-service
  profiles:
    active: dev
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 564603883747-jcenartmeh82a2vkbga46gnh4fhir2ns.apps.googleusercontent.com
            client-secret: JOCos0cl_IayylbRRmRGUYmz
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile

logging:
  file:
    name: garage.log

eureka:
  client:
    serviceUrl:
      defaultZone: ${DISCOVERY_URL:http://localhost:8761}/eureka/
  instance:
    leaseRenewalIntervalInSeconds: 1
    leaseExpirationDurationInSeconds: 2

ribbon:
  eureka:
    enabled: true

---
spring:
  profiles: dev
  datasource:
    url: jdbc:postgresql://localhost:5432/garage
    username: postgres
    password: postgres
  jpa:
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update
    show-sql: true

logging.level.org.springframework.security: info

management:
  endpoints:
    web:
      exposure:
        include: '*'

graphql:
  servlet:
    mapping: /users
    enabled: true
    corsEnabled: true
    exception-handlers-enabled: true


app:
  auth:
    tokenSecret: V347TH348F7H3948RH3984HF3847FH384HF
    tokenExpirationMsec: 6000000
#  oauth2:
#    # After successfully authenticating with the OAuth2 Provider,
#    # we'll be generating an auth token for the user and sending the token to the
#    # redirectUri mentioned by the client in the /oauth2/authorize request.
#    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect

altair:
  mapping: /altair
  endpoint:
    graphql: /graphql
    subscriptions: /subscriptions
  subscriptions:
    timeout: 30
    reconnect: false
  static:
    basePath: /localhost
  enabled: true
  pageTitle: Altair
  cdn:
    enabled: true
    version: 2.1.7
  props:
    resources:
      defaultQuery: graphql/schema.graphqls
#      variables: variables.graphql
  headers:
    Authorization: "Bearer <your-token>"

---
spring:
  profiles: prod